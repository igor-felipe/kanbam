generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  password String
  email    String @unique
  name     String

  workspace workspace[]
  Member    Member[]

  @@map("user")
}

model workspace {
  id   String @id @default(cuid())
  name String

  User   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  Member Member[]
  Board  Board[]

  @@unique([name, userId])
  @@map("workspace")
}

model Member {
  role        String
  userId      String
  workspaceId String

  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspace workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cardId    Int?
  Card      Card?     @relation(fields: [cardId], references: [id])

  @@id([workspaceId, userId])
  @@map("post")
}

model Label {
  id      Int     @id @default(autoincrement())
  name    String
  color   String
  Board   Board?  @relation(fields: [boardId], references: [id])
  boardId String?
  Card    Card[]

  @@map("label")
}

model Board {
  id          String  @id @default(cuid())
  name        String
  description String
  labels      Label[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Column      Column[]
  workspace   workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId String

  @@unique([name, workspaceId])
  @@map("board")
}

model Column {
  id          String @id @default(cuid())
  name        String
  description String
  board       Board  @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  boardId     String
  wip         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Card Card[]

  @@unique([name, boardId])
  @@map("column")
}

enum Priority {
  low
  medium
  high
}

model Card {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  priority    Priority?
  cover       String?
  archived    Boolean
  dueDate     DateTime?
  columnId    String
  labels      Label[]
  comments    Json[]
  activity    Json[]

  member    Member[]
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, columnId])
  @@map("card")
}
